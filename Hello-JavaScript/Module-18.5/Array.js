// 1. ржЕрзНржпрж╛рж░рзЗ ржХрзА?
// ЁЯСЙ ржЕрзНржпрж╛рж░рзЗ (Array) рж╣рж▓ ржПржХржЯрж┐ ржбрж╛ржЯрж╛ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░, ржпрзЗржЦрж╛ржирзЗ ржПржХрж╛ржзрж┐ржХ ржорж╛ржи (values) ржПржХрж╕рж╛ржерзЗ ржПржХржЯрж┐ ржнрзЗрж░рж┐рзЯрзЗржмрж▓рзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ ржпрж╛рзЯред рж╕рж╛ржзрж╛рж░ржг ржнрзЗрж░рж┐рзЯрзЗржмрж▓рзЗ ржПржХржЯрж┐ ржорж╛рждрзНрж░ ржорж╛ржи рж░рж╛ржЦрж╛ ржпрж╛рзЯ, ржХрж┐ржирзНрждрзБ ржЕрзНржпрж╛рж░рзЗрждрзЗ ржПржХрж╛ржзрж┐ржХ ржорж╛ржи рж░рж╛ржЦрж╛ рж╕ржорзНржнржмред

let numbers = [10, 20, 30, 40, 50];
console.log(numbers); // Output: [10, 20, 30, 40, 50]

// ржПржЦрж╛ржирзЗ numbers ржнрзЗрж░рж┐рзЯрзЗржмрж▓рзЗ рзлржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж╕ржВрж░ржХрзНрж╖рж┐ржд ржЖржЫрзЗред

// 2. ржЕрзНржпрж╛рж░рзЗ ржбрж┐ржХрзНрж▓рзЗрзЯрж╛рж░ ржХрж░рж╛рж░ ржЙржкрж╛рзЯ
// (i) Square Brackets ([]) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ (рж╕рж╛ржзрж╛рж░ржг ржкржжрзНржзрждрж┐)

let fruits = ["Apple", "Mango", "Banana"];
console.log(fruits); // Output: ["Apple", "Mango", "Banana"]

// (ii) new Array() ржХржирзНрж╕ржЯрзНрж░рж╛ржХрзНржЯрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ
let colors = new Array("Red", "Green", "Blue");
console.log(colors); // Output: ["Red", "Green", "Blue"]

// тЬЕ ржкрзНрж░ржержо ржкржжрзНржзрждрж┐ ([]) ржмрзЗрж╢рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ ржХрж╛рж░ржг ржПржЯрж┐ рж╕рж╣ржЬ ржПржмржВ рж╕ржВржХрзНрж╖рж┐ржкрзНрждред

// 3. ржЕрзНржпрж╛рж░рзЗрждрзЗ ржЗржиржбрзЗржХрзНрж╕ (Index) ржПржмржВ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛
// тЬЕ ржЕрзНржпрж╛рж░рзЗрждрзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржЙржкрж╛ржжрж╛ржирзЗрж░ (element) ржирж┐ржЬрж╕рзНржм ржЗржиржбрзЗржХрзНрж╕ ржиржорзНржмрж░ ржерж╛ржХрзЗред
// тЬЕ ржЗржиржбрзЗржХрзНрж╕ рж╢рзБрж░рзБ рж╣рзЯ 0 ржерзЗржХрзЗред

// let fruits = ["Apple", "Mango", "Banana"];
// console.log(fruits[0]);
// console.log(fruits[1]);
// console.log(fruits[2]);


// 4. ржЕрзНржпрж╛рж░рзЗрждрзЗ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи (Update) ржХрж░рж╛

// let fruits = ["Apple", "Mango", "Banana"];
// fruits[1] = "Orange";
// console.log(fruits); // Output: ["Apple", "Orange", "Banana"]
// тЬЕ ржПржЦрж╛ржирзЗ fruits[1] ржЫрж┐рж▓ "Mango", рж╕рзЗржЯрж┐ржХрзЗ "Orange" ржжрж┐рзЯрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред



// 5. ржЕрзНржпрж╛рж░рзЗрж░ ржжрзИрж░рзНржШрзНржп (length) ржмрзЗрж░ ржХрж░рж╛
// let numbers = [10, 20, 30, 40, 50];
console.log(numbers.length);

// тЬЕ length ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржЕрзНржпрж╛рж░рзЗрж░ ржЙржкрж╛ржжрж╛ржиржЧрзБрж▓рзЛрж░ рж╕ржВржЦрзНржпрж╛ ржмрж▓рзЗ ржжрзЗрзЯред

// 6. ржЕрзНржпрж╛рж░рзЗрждрзЗ ржирждрзБржи ржорж╛ржи ржпрзЛржЧ ржУ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
// (i) push() тЖТ рж╢рзЗрж╖рзЗ ржирждрзБржи ржорж╛ржи ржпрзЛржЧ ржХрж░рж╛

// let fruits = ["Apple", "Mango"];
fruits.push("Banana");
console.log(fruits);

// тЬЕ push() рж╢рзЗрж╖рзЗ ржПржХржЯрж┐ ржирждрзБржи ржЙржкрж╛ржжрж╛ржи ржпрзЛржЧ ржХрж░рзЗред

// (ii) pop() тЖТ рж╢рзЗрж╖рзЗрж░ ржорж╛ржи ржорзБржЫрзЗ ржлрзЗрж▓рж╛

fruits.pop();
console.log(fruits);
// тЬЕ pop() рж╢рзЗрж╖рзЗрж░ ржЙржкрж╛ржжрж╛ржи ржорзБржЫрзЗ ржлрзЗрж▓рзЗред

// (iii) unshift() тЖТ рж╢рзБрж░рзБрждрзЗ ржирждрзБржи ржорж╛ржи ржпрзЛржЧ ржХрж░рж╛
fruits.unshift("Apple");
console.log(fruits); // Output: ["Apple", "Mango", "Banana"]
// тЬЕ unshift() рж╢рзБрж░рзБрж░ ржжрж┐ржХрзЗ ржирждрзБржи ржЙржкрж╛ржжрж╛ржи ржпрзЛржЧ ржХрж░рзЗред

// (iv) shift() тЖТ рж╢рзБрж░рзБ ржерзЗржХрзЗ ржорж╛ржи ржорзБржЫрзЗ ржлрзЗрж▓рж╛

fruits.shift();
console.log(fruits);


// 7. ржЕрзНржпрж╛рж░рзЗрж░ рж▓рзБржкрж┐ржВ (Looping)
// (i) for рж▓рзБржк ржжрж┐рзЯрзЗ

// let numbers = [10, 20, 30, 40];

for (let i = 0; i < numbers.length; i++) {
    console.log(numbers[i]);
}

// (ii) forEach() ржорзЗржержб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ

numbers.forEach(function (num) {
    console.log(num);
});


// (iii) for...of рж▓рзБржк ржжрж┐рзЯрзЗ

for (let num of numbers) {
    console.log(num);
}

/* 8. ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржЕрзНржпрж╛рж░рзЗ ржорзЗржержб (Methods)

ржорзЗржержб	ржХрж╛ржЬ
push(value)	 -> ржЕрзНржпрж╛рж░рзЗрж░ рж╢рзЗрж╖рзЗ ржирждрзБржи ржорж╛ржи ржпрзЛржЧ ржХрж░рзЗ
pop()	-> рж╢рзЗрж╖рзЗрж░ ржорж╛ржи ржорзБржЫрзЗ ржлрзЗрж▓рзЗ
unshift(value)	-> ржЕрзНржпрж╛рж░рзЗрж░ рж╢рзБрж░рзБрждрзЗ ржирждрзБржи ржорж╛ржи ржпрзЛржЧ ржХрж░рзЗ
shift()	-> ржкрзНрж░ржержо ржЙржкрж╛ржжрж╛ржи ржорзБржЫрзЗ ржлрзЗрж▓рзЗ
length	-> ржЕрзНржпрж╛рж░рзЗрж░ ржжрзИрж░рзНржШрзНржп ржжрзЗрзЯ
indexOf(value)	-> ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржорж╛ржирзЗрж░ ржЗржиржбрзЗржХрзНрж╕ ржЦрзБржБржЬрзЗ ржжрзЗрзЯ
includes(value)	-> ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржорж╛ржи ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзЗ (true/false)
slice(start, end)	-> ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЕржВрж╢ ржХржкрж┐ ржХрж░рзЗ ржирждрзБржи ржЕрзНржпрж╛рж░рзЗ рждрзИрж░рж┐ ржХрж░рзЗ
splice(start, deleteCount, newItems...)	-> ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ ржХрж┐ржЫрзБ ржЙржкрж╛ржжрж╛ржи ржорзБржЫрзЗ ржлрзЗрж▓рзЗ ржмрж╛ ржпрзЛржЧ ржХрж░рзЗ
join(separator)	-> рж╕ржм ржЙржкрж╛ржжрж╛ржиржХрзЗ ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ
reverse()	-> ржЕрзНржпрж╛рж░рзЗ ржЙрж▓рзНржЯрж┐рзЯрзЗ ржжрзЗрзЯ
sort()	-> ржЕрзНржпрж╛рж░рзЗ рж╕рж╛ржЬрж╛рзЯ (ржбрж┐ржлрж▓рзНржЯржнрж╛ржмрзЗ ржЕрзНржпрж╛рж▓ржлрж╛ржмрзЗржЯрж┐ржХрж╛рж▓рж┐)

 */


/* 
9. map(), filter(), ржПржмржВ reduce() ржорзЗржержб -> 
*/

// (i) map() тЖТ ржкрзНрж░рждрж┐ржЯрж┐ ржЙржкрж╛ржжрж╛ржирзЗ ржХрж┐ржЫрзБ ржЕржкрж╛рж░рзЗрж╢ржи ржЪрж╛рж▓рж┐рзЯрзЗ ржирждрзБржи ржЕрзНржпрж╛рж░рзЗ рждрзИрж░рж┐ ржХрж░рзЗ

let doubled = numbers.map(num => num * 2);
console.log(doubled);

// (ii) filter() тЖТ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╢рж░рзНржд ржЕржирзБржпрж╛рзЯрзА ржЙржкрж╛ржжрж╛ржи ржмрзЗрж░ ржХрж░рзЗ ржирждрзБржи ржЕрзНржпрж╛рж░рзЗ рждрзИрж░рж┐ ржХрж░рзЗ
let greaterThan20 = numbers.filter(num => num > 20);
console.log(greaterThan20);

// (iii) reduce() тЖТ рж╕ржм ржЙржкрж╛ржжрж╛ржиржХрзЗ ржПржХрждрзНрж░ ржХрж░рзЗ ржПржХржХ ржорж╛ржи рждрзИрж░рж┐ ржХрж░рзЗ
let sum = numbers.reduce((total, num) => total + num, 0);
console.log(sum);

/* ЁЯФ╣ ржЙржкрж╕ржВрж╣рж╛рж░
тЬЕ ржЕрзНржпрж╛рж░рзЗ ржПржХрж╛ржзрж┐ржХ ржорж╛ржи рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред
тЬЕ push(), pop(), shift(), unshift() ржжрж┐рзЯрзЗ ржЙржкрж╛ржжрж╛ржи ржпрзЛржЧ/ржорзБржЫрждрзЗ ржкрж╛рж░рж┐ред
тЬЕ map(), filter(), reduce() ржПрж░ ржорждрзЛ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржорзЗржержб рж░рзЯрзЗржЫрзЗред
тЬЕ рж▓рзБржк (for, forEach, for...of) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЕрзНржпрж╛рж░рзЗрж░ ржЙржкрж╛ржжрж╛ржиржЧрзБрж▓рзЛ ржПржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржпрж╛рзЯред */